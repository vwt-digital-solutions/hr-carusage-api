# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TripFlatten(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license=None, started_at=None, ended_at=None, department=None, function_name=None, initial=None, last_name=None, prefix=None, registration_number=None, trip_kind='work', description=None):  # noqa: E501
        """TripFlatten - a model defined in OpenAPI

        :param license: The license of this TripFlatten.  # noqa: E501
        :type license: str
        :param started_at: The started_at of this TripFlatten.  # noqa: E501
        :type started_at: datetime
        :param ended_at: The ended_at of this TripFlatten.  # noqa: E501
        :type ended_at: datetime
        :param department: The department of this TripFlatten.  # noqa: E501
        :type department: int
        :param function_name: The function_name of this TripFlatten.  # noqa: E501
        :type function_name: str
        :param initial: The initial of this TripFlatten.  # noqa: E501
        :type initial: str
        :param last_name: The last_name of this TripFlatten.  # noqa: E501
        :type last_name: str
        :param prefix: The prefix of this TripFlatten.  # noqa: E501
        :type prefix: str
        :param registration_number: The registration_number of this TripFlatten.  # noqa: E501
        :type registration_number: int
        :param trip_kind: The trip_kind of this TripFlatten.  # noqa: E501
        :type trip_kind: str
        :param description: The description of this TripFlatten.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'license': str,
            'started_at': datetime,
            'ended_at': datetime,
            'department': int,
            'function_name': str,
            'initial': str,
            'last_name': str,
            'prefix': str,
            'registration_number': int,
            'trip_kind': str,
            'description': str
        }

        self.attribute_map = {
            'license': 'license',
            'started_at': 'started_at',
            'ended_at': 'ended_at',
            'department': 'department',
            'function_name': 'function_name',
            'initial': 'initial',
            'last_name': 'last_name',
            'prefix': 'prefix',
            'registration_number': 'registration_number',
            'trip_kind': 'trip_kind',
            'description': 'description'
        }

        self._license = license
        self._started_at = started_at
        self._ended_at = ended_at
        self._department = department
        self._function_name = function_name
        self._initial = initial
        self._last_name = last_name
        self._prefix = prefix
        self._registration_number = registration_number
        self._trip_kind = trip_kind
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'TripFlatten':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TripFlatten of this TripFlatten.  # noqa: E501
        :rtype: TripFlatten
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license(self):
        """Gets the license of this TripFlatten.


        :return: The license of this TripFlatten.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this TripFlatten.


        :param license: The license of this TripFlatten.
        :type license: str
        """
        if license is not None and len(license) > 100:
            raise ValueError("Invalid value for `license`, length must be less than or equal to `100`")  # noqa: E501

        self._license = license

    @property
    def started_at(self):
        """Gets the started_at of this TripFlatten.


        :return: The started_at of this TripFlatten.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this TripFlatten.


        :param started_at: The started_at of this TripFlatten.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this TripFlatten.


        :return: The ended_at of this TripFlatten.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this TripFlatten.


        :param ended_at: The ended_at of this TripFlatten.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def department(self):
        """Gets the department of this TripFlatten.


        :return: The department of this TripFlatten.
        :rtype: int
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this TripFlatten.


        :param department: The department of this TripFlatten.
        :type department: int
        """
        if department is not None and department < 0:  # noqa: E501
            raise ValueError("Invalid value for `department`, must be a value greater than or equal to `0`")  # noqa: E501

        self._department = department

    @property
    def function_name(self):
        """Gets the function_name of this TripFlatten.


        :return: The function_name of this TripFlatten.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this TripFlatten.


        :param function_name: The function_name of this TripFlatten.
        :type function_name: str
        """
        if function_name is not None and len(function_name) > 100:
            raise ValueError("Invalid value for `function_name`, length must be less than or equal to `100`")  # noqa: E501

        self._function_name = function_name

    @property
    def initial(self):
        """Gets the initial of this TripFlatten.


        :return: The initial of this TripFlatten.
        :rtype: str
        """
        return self._initial

    @initial.setter
    def initial(self, initial):
        """Sets the initial of this TripFlatten.


        :param initial: The initial of this TripFlatten.
        :type initial: str
        """
        if initial is not None and len(initial) > 100:
            raise ValueError("Invalid value for `initial`, length must be less than or equal to `100`")  # noqa: E501

        self._initial = initial

    @property
    def last_name(self):
        """Gets the last_name of this TripFlatten.


        :return: The last_name of this TripFlatten.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TripFlatten.


        :param last_name: The last_name of this TripFlatten.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")  # noqa: E501

        self._last_name = last_name

    @property
    def prefix(self):
        """Gets the prefix of this TripFlatten.


        :return: The prefix of this TripFlatten.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this TripFlatten.


        :param prefix: The prefix of this TripFlatten.
        :type prefix: str
        """
        if prefix is not None and len(prefix) > 100:
            raise ValueError("Invalid value for `prefix`, length must be less than or equal to `100`")  # noqa: E501

        self._prefix = prefix

    @property
    def registration_number(self):
        """Gets the registration_number of this TripFlatten.


        :return: The registration_number of this TripFlatten.
        :rtype: int
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this TripFlatten.


        :param registration_number: The registration_number of this TripFlatten.
        :type registration_number: int
        """
        if registration_number is not None and registration_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `registration_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._registration_number = registration_number

    @property
    def trip_kind(self):
        """Gets the trip_kind of this TripFlatten.


        :return: The trip_kind of this TripFlatten.
        :rtype: str
        """
        return self._trip_kind

    @trip_kind.setter
    def trip_kind(self, trip_kind):
        """Sets the trip_kind of this TripFlatten.


        :param trip_kind: The trip_kind of this TripFlatten.
        :type trip_kind: str
        """
        allowed_values = ["work", "personal"]  # noqa: E501
        if trip_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `trip_kind` ({0}), must be one of {1}"
                .format(trip_kind, allowed_values)
            )

        self._trip_kind = trip_kind

    @property
    def description(self):
        """Gets the description of this TripFlatten.


        :return: The description of this TripFlatten.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TripFlatten.


        :param description: The description of this TripFlatten.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description
